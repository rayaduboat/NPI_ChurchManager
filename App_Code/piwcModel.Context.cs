//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using System.Linq;

public partial class DistrictDBEntities : DbContext
{
    public DistrictDBEntities()
        : base("name=DistrictDBEntities")
    {
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }

    public virtual DbSet<Announcement> Announcements { get; set; }
    public virtual DbSet<AppointmentRole> AppointmentRoles { get; set; }
    public virtual DbSet<BankAccount> BankAccounts { get; set; }
    public virtual DbSet<BankTransaction> BankTransactions { get; set; }
    public virtual DbSet<Branch> Branches { get; set; }
    public virtual DbSet<BranchGrouping> BranchGroupings { get; set; }
    public virtual DbSet<Discipline> Disciplines { get; set; }
    public virtual DbSet<Event> Events { get; set; }
    public virtual DbSet<Finance> Finances { get; set; }
    public virtual DbSet<FinanceFilter> FinanceFilters { get; set; }
    public virtual DbSet<LeadershipChanx> LeadershipChanges { get; set; }
    public virtual DbSet<Meeting> Meetings { get; set; }
    public virtual DbSet<Pledge> Pledges { get; set; }
    public virtual DbSet<SpecialFund> SpecialFunds { get; set; }
    public virtual DbSet<Training> Trainings { get; set; }
    public virtual DbSet<Area> Areas { get; set; }
    public virtual DbSet<Asset> Assets { get; set; }
    public virtual DbSet<BranchDetail> BranchDetails { get; set; }
    public virtual DbSet<ChurchGroup> ChurchGroups { get; set; }
    public virtual DbSet<Country> Countries { get; set; }
    public virtual DbSet<District> Districts { get; set; }
    public virtual DbSet<Expenditure> Expenditures { get; set; }
    public virtual DbSet<ExternalOrganization> ExternalOrganizations { get; set; }
    public virtual DbSet<FinanceExpenditureItem> FinanceExpenditureItems { get; set; }
    public virtual DbSet<FinanceExpenditureSource> FinanceExpenditureSources { get; set; }
    public virtual DbSet<FinanceIncomeItem> FinanceIncomeItems { get; set; }
    public virtual DbSet<FinanceIncomeSource> FinanceIncomeSources { get; set; }
    public virtual DbSet<FinancePayMode> FinancePayModes { get; set; }
    public virtual DbSet<Income> Incomes { get; set; }
    public virtual DbSet<National> Nationals { get; set; }
    public virtual DbSet<ReportBug> ReportBugs { get; set; }
    public virtual DbSet<Support> Supports { get; set; }
    public virtual DbSet<UKCity> UKCities { get; set; }
    public virtual DbSet<Client> Clients { get; set; }
    public virtual DbSet<Configuration> Configurations { get; set; }
    public virtual DbSet<Dictionary> Dictionaries { get; set; }
    public virtual DbSet<Token> Tokens { get; set; }
    public virtual DbSet<local_activities_reminder> local_activities_reminder { get; set; }
    public virtual DbSet<Phonebook> Phonebooks { get; set; }
    public virtual DbSet<VendorApiKey> VendorApiKeys { get; set; }
    public virtual DbSet<Admin> Admins { get; set; }
    public virtual DbSet<AdminDetail> AdminDetails { get; set; }
    public virtual DbSet<ChurchDetail> ChurchDetails { get; set; }
    public virtual DbSet<Country1> Countries1 { get; set; }
    public virtual DbSet<LicenceLookUp> LicenceLookUps { get; set; }
    public virtual DbSet<License> Licenses { get; set; }
    public virtual DbSet<SupperUser> SupperUsers { get; set; }
    public virtual DbSet<SupperUserDetail> SupperUserDetails { get; set; }
    public virtual DbSet<CommentTable> CommentTables { get; set; }
    public virtual DbSet<LikeTable> LikeTables { get; set; }
    public virtual DbSet<OccassionImage> OccassionImages { get; set; }
    public virtual DbSet<SharingTable> SharingTables { get; set; }
    public virtual DbSet<TagTable> TagTables { get; set; }
    public virtual DbSet<Book> Books { get; set; }
    public virtual DbSet<Donor> Donors { get; set; }
    public virtual DbSet<Inventory> Inventories { get; set; }
    public virtual DbSet<Lending> Lendings { get; set; }
    public virtual DbSet<Activity> Activities { get; set; }
    public virtual DbSet<AppointmentReview> AppointmentReviews { get; set; }
    public virtual DbSet<AssignedBranch> AssignedBranches { get; set; }
    public virtual DbSet<Association> Associations { get; set; }
    public virtual DbSet<Attendance> Attendances { get; set; }
    public virtual DbSet<CellGroup> CellGroups { get; set; }
    public virtual DbSet<Communication> Communications { get; set; }
    public virtual DbSet<Contribution> Contributions { get; set; }
    public virtual DbSet<COVID_Temperature> COVID_Temperature { get; set; }
    public virtual DbSet<Department> Departments { get; set; }
    public virtual DbSet<FollowUpResponse> FollowUpResponses { get; set; }
    public virtual DbSet<GiftAid> GiftAids { get; set; }
    public virtual DbSet<Giving> Givings { get; set; }
    public virtual DbSet<Interest> Interests { get; set; }
    public virtual DbSet<Leadership> Leaderships { get; set; }
    public virtual DbSet<Letter> Letters { get; set; }
    public virtual DbSet<LoginPermissionSet> LoginPermissionSets { get; set; }
    public virtual DbSet<Mail> Mails { get; set; }
    public virtual DbSet<Member> Members { get; set; }
    public virtual DbSet<MemberAdmin> MemberAdmins { get; set; }
    public virtual DbSet<MemberAppointment> MemberAppointments { get; set; }
    public virtual DbSet<MemberAppointmentRoleReview> MemberAppointmentRoleReviews { get; set; }
    public virtual DbSet<MemberBaptism> MemberBaptism { get; set; }
    public virtual DbSet<MemberGroup> MemberGroups { get; set; }
    public virtual DbSet<MemberRelation> MemberRelations { get; set; }
    public virtual DbSet<MemberTransfer> MemberTransfers { get; set; }
    public virtual DbSet<MemberUpdate> MemberUpdates { get; set; }
    public virtual DbSet<NextOfKin> NextOfKins { get; set; }
    public virtual DbSet<OfficeAppointment> OfficeAppointments { get; set; }
    public virtual DbSet<PasswordReset> PasswordResets { get; set; }
    public virtual DbSet<PictureBox> PictureBoxes { get; set; }
    public virtual DbSet<Planning> Plannings { get; set; }
    public virtual DbSet<PrayerRequest> PrayerRequests { get; set; }
    public virtual DbSet<Profession> Professions { get; set; }
    public virtual DbSet<Programme> Programmes { get; set; }
    public virtual DbSet<SalvationAndBaptism> SalvationAndBaptism { get; set; }
    public virtual DbSet<Sermon> Sermons { get; set; }
    public virtual DbSet<SuggestionBox> SuggestionBoxes { get; set; }
    public virtual DbSet<TransportEvent> TransportEvents { get; set; }
    public virtual DbSet<TransportEventBooking> TransportEventBookings { get; set; }
    public virtual DbSet<Visitation> Visitations { get; set; }
    public virtual DbSet<AuditTrail> AuditTrails { get; set; }
    public virtual DbSet<ConventionAndConference> ConventionAndConferences { get; set; }
    public virtual DbSet<DistrictEvent> DistrictEvents { get; set; }
    public virtual DbSet<MonthlyReleaseAnnouncement> MonthlyReleaseAnnouncements { get; set; }
    public virtual DbSet<MonthlyReleasePreaching> MonthlyReleasePreachings { get; set; }
    public virtual DbSet<RepWeeklyServiceReport> RepWeeklyServiceReports { get; set; }
    public virtual DbSet<SavedReportQuery> SavedReportQueries { get; set; }
    public virtual DbSet<StandardReport> StandardReports { get; set; }
    public virtual DbSet<Table_Census> Table_Census { get; set; }
    public virtual DbSet<Table_WeeklyServiceReport> Table_WeeklyServiceReport { get; set; }
    public virtual DbSet<BranchAccount> BranchAccounts { get; set; }
    public virtual DbSet<Theme> Themes { get; set; }
    public virtual DbSet<Transfer> Transfers { get; set; }
    public virtual DbSet<VW_Activities> VW_Activities { get; set; }
    public virtual DbSet<VW_ChurchDetails> VW_ChurchDetails { get; set; }
    public virtual DbSet<VW_DeleteFinanceExpenditureItem> VW_DeleteFinanceExpenditureItem { get; set; }
    public virtual DbSet<VW_DeleteFinanceExpenditureSource> VW_DeleteFinanceExpenditureSource { get; set; }
    public virtual DbSet<VW_DeleteFinanceIncomeItem> VW_DeleteFinanceIncomeItem { get; set; }
    public virtual DbSet<VW_DeleteFinanceIncomeSource> VW_DeleteFinanceIncomeSource { get; set; }
    public virtual DbSet<VW_DeleteFinancePayMode> VW_DeleteFinancePayMode { get; set; }
    public virtual DbSet<VW_GetExpenditureTransaction> VW_GetExpenditureTransaction { get; set; }
    public virtual DbSet<VW_GetFinanceExpenditureItem> VW_GetFinanceExpenditureItem { get; set; }
    public virtual DbSet<VW_GetFinanceIncomeItem> VW_GetFinanceIncomeItem { get; set; }
    public virtual DbSet<VW_GetFinanceIncomeItemPayMode> VW_GetFinanceIncomeItemPayMode { get; set; }
    public virtual DbSet<VW_GetFinanceIncomeItemSource> VW_GetFinanceIncomeItemSource { get; set; }
    public virtual DbSet<VW_Groups> VW_Groups { get; set; }
    public virtual DbSet<VW_BranchDetails> VW_BranchDetails { get; set; }
    public virtual DbSet<VW_GetLinceInfo> VW_GetLinceInfo { get; set; }
    public virtual DbSet<MemberRelative> MemberRelatives { get; set; }
    public virtual DbSet<VW_Association> VW_Association { get; set; }
    public virtual DbSet<VW_AttendanceReport> VW_AttendanceReport { get; set; }
    public virtual DbSet<VW_GetAdminDetails> VW_GetAdminDetails { get; set; }
    public virtual DbSet<VW_GetMemberDetails> VW_GetMemberDetails { get; set; }
    public virtual DbSet<VW_Profession> VW_Profession { get; set; }

    [DbFunction("DistrictDBEntities", "GetDailyQuote")]
    public virtual IQueryable<GetDailyQuote_Result> GetDailyQuote()
    {
        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDailyQuote_Result>("[DistrictDBEntities].[GetDailyQuote]()");
    }

    [DbFunction("DistrictDBEntities", "SplitInts")]
    public virtual IQueryable<SplitInts_Result> SplitInts(string list, string delimiter)
    {
        var listParameter = list != null ?
            new ObjectParameter("List", list) :
            new ObjectParameter("List", typeof(string));

        var delimiterParameter = delimiter != null ?
            new ObjectParameter("Delimiter", delimiter) :
            new ObjectParameter("Delimiter", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitInts_Result>("[DistrictDBEntities].[SplitInts](@List, @Delimiter)", listParameter, delimiterParameter);
    }

    public virtual ObjectResult<Sp_Announcement_Result> Sp_Announcement(string flag, Nullable<int> announcementID, Nullable<int> branchID, string announcementType, string sender, string purpose, string comment, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var announcementIDParameter = announcementID.HasValue ?
            new ObjectParameter("AnnouncementID", announcementID) :
            new ObjectParameter("AnnouncementID", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var announcementTypeParameter = announcementType != null ?
            new ObjectParameter("AnnouncementType", announcementType) :
            new ObjectParameter("AnnouncementType", typeof(string));

        var senderParameter = sender != null ?
            new ObjectParameter("Sender", sender) :
            new ObjectParameter("Sender", typeof(string));

        var purposeParameter = purpose != null ?
            new ObjectParameter("Purpose", purpose) :
            new ObjectParameter("Purpose", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Announcement_Result>("Sp_Announcement", flagParameter, announcementIDParameter, branchIDParameter, announcementTypeParameter, senderParameter, purposeParameter, commentParameter, message);
    }

    public virtual ObjectResult<Sp_Discipline_Result> Sp_Discipline(string flag, Nullable<int> disciplineID, Nullable<int> branchID, Nullable<int> memberID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string disciplineType, string comment, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var disciplineIDParameter = disciplineID.HasValue ?
            new ObjectParameter("DisciplineID", disciplineID) :
            new ObjectParameter("DisciplineID", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));

        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));

        var disciplineTypeParameter = disciplineType != null ?
            new ObjectParameter("DisciplineType", disciplineType) :
            new ObjectParameter("DisciplineType", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Discipline_Result>("Sp_Discipline", flagParameter, disciplineIDParameter, branchIDParameter, memberIDParameter, fromDateParameter, toDateParameter, disciplineTypeParameter, commentParameter, message);
    }

    public virtual ObjectResult<Sp_LeadershipChanges_Result> Sp_LeadershipChanges(string flag, Nullable<int> leadershipChangesID, Nullable<int> memberID, Nullable<int> branchID, string oldRole, Nullable<int> oldBranchID, Nullable<int> newBranchID, string newRole, Nullable<System.DateTime> dateOfAppointment, string officiatingMinister, string comment, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var leadershipChangesIDParameter = leadershipChangesID.HasValue ?
            new ObjectParameter("LeadershipChangesID", leadershipChangesID) :
            new ObjectParameter("LeadershipChangesID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var oldRoleParameter = oldRole != null ?
            new ObjectParameter("OldRole", oldRole) :
            new ObjectParameter("OldRole", typeof(string));

        var oldBranchIDParameter = oldBranchID.HasValue ?
            new ObjectParameter("OldBranchID", oldBranchID) :
            new ObjectParameter("OldBranchID", typeof(int));

        var newBranchIDParameter = newBranchID.HasValue ?
            new ObjectParameter("NewBranchID", newBranchID) :
            new ObjectParameter("NewBranchID", typeof(int));

        var newRoleParameter = newRole != null ?
            new ObjectParameter("NewRole", newRole) :
            new ObjectParameter("NewRole", typeof(string));

        var dateOfAppointmentParameter = dateOfAppointment.HasValue ?
            new ObjectParameter("DateOfAppointment", dateOfAppointment) :
            new ObjectParameter("DateOfAppointment", typeof(System.DateTime));

        var officiatingMinisterParameter = officiatingMinister != null ?
            new ObjectParameter("OfficiatingMinister", officiatingMinister) :
            new ObjectParameter("OfficiatingMinister", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_LeadershipChanges_Result>("Sp_LeadershipChanges", flagParameter, leadershipChangesIDParameter, memberIDParameter, branchIDParameter, oldRoleParameter, oldBranchIDParameter, newBranchIDParameter, newRoleParameter, dateOfAppointmentParameter, officiatingMinisterParameter, commentParameter, message);
    }

    public virtual ObjectResult<Sp_Meeting_Result> Sp_Meeting(string flag, Nullable<int> meetingID, Nullable<int> branchID, Nullable<System.DateTime> meetingDate, string meetingType, string chair, string purpose, string comment, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var meetingIDParameter = meetingID.HasValue ?
            new ObjectParameter("MeetingID", meetingID) :
            new ObjectParameter("MeetingID", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var meetingDateParameter = meetingDate.HasValue ?
            new ObjectParameter("MeetingDate", meetingDate) :
            new ObjectParameter("MeetingDate", typeof(System.DateTime));

        var meetingTypeParameter = meetingType != null ?
            new ObjectParameter("MeetingType", meetingType) :
            new ObjectParameter("MeetingType", typeof(string));

        var chairParameter = chair != null ?
            new ObjectParameter("Chair", chair) :
            new ObjectParameter("Chair", typeof(string));

        var purposeParameter = purpose != null ?
            new ObjectParameter("Purpose", purpose) :
            new ObjectParameter("Purpose", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Meeting_Result>("Sp_Meeting", flagParameter, meetingIDParameter, branchIDParameter, meetingDateParameter, meetingTypeParameter, chairParameter, purposeParameter, commentParameter, message);
    }

    public virtual ObjectResult<Sp_Training_Result> Sp_Training(string flag, Nullable<int> trainingID, Nullable<int> branchID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string trainingType, string location, string purpose, string attendees, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var trainingIDParameter = trainingID.HasValue ?
            new ObjectParameter("TrainingID", trainingID) :
            new ObjectParameter("TrainingID", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var fromDateParameter = fromDate.HasValue ?
            new ObjectParameter("FromDate", fromDate) :
            new ObjectParameter("FromDate", typeof(System.DateTime));

        var toDateParameter = toDate.HasValue ?
            new ObjectParameter("ToDate", toDate) :
            new ObjectParameter("ToDate", typeof(System.DateTime));

        var trainingTypeParameter = trainingType != null ?
            new ObjectParameter("TrainingType", trainingType) :
            new ObjectParameter("TrainingType", typeof(string));

        var locationParameter = location != null ?
            new ObjectParameter("Location", location) :
            new ObjectParameter("Location", typeof(string));

        var purposeParameter = purpose != null ?
            new ObjectParameter("Purpose", purpose) :
            new ObjectParameter("Purpose", typeof(string));

        var attendeesParameter = attendees != null ?
            new ObjectParameter("Attendees", attendees) :
            new ObjectParameter("Attendees", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Training_Result>("Sp_Training", flagParameter, trainingIDParameter, branchIDParameter, fromDateParameter, toDateParameter, trainingTypeParameter, locationParameter, purposeParameter, attendeesParameter, message);
    }

    public virtual int Sp_Activities(string flag, Nullable<int> activityID, Nullable<int> branchID, string activityName, Nullable<System.DateTime> createdOn, string createdBy, string speaker, string location, string comment, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var activityIDParameter = activityID.HasValue ?
            new ObjectParameter("ActivityID", activityID) :
            new ObjectParameter("ActivityID", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var activityNameParameter = activityName != null ?
            new ObjectParameter("ActivityName", activityName) :
            new ObjectParameter("ActivityName", typeof(string));

        var createdOnParameter = createdOn.HasValue ?
            new ObjectParameter("CreatedOn", createdOn) :
            new ObjectParameter("CreatedOn", typeof(System.DateTime));

        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));

        var speakerParameter = speaker != null ?
            new ObjectParameter("Speaker", speaker) :
            new ObjectParameter("Speaker", typeof(string));

        var locationParameter = location != null ?
            new ObjectParameter("Location", location) :
            new ObjectParameter("Location", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Activities", flagParameter, activityIDParameter, branchIDParameter, activityNameParameter, createdOnParameter, createdByParameter, speakerParameter, locationParameter, commentParameter, message);
    }

    public virtual int Sp_AddIncomeItem(string flag, string name, Nullable<System.DateTime> date, string description, string source, string payMode, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));

        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));

        var sourceParameter = source != null ?
            new ObjectParameter("Source", source) :
            new ObjectParameter("Source", typeof(string));

        var payModeParameter = payMode != null ?
            new ObjectParameter("PayMode", payMode) :
            new ObjectParameter("PayMode", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddIncomeItem", flagParameter, nameParameter, dateParameter, descriptionParameter, sourceParameter, payModeParameter, message);
    }

    public virtual ObjectResult<Sp_ChurchGroups_Result> Sp_ChurchGroups(string flag, Nullable<int> churchGroupsID, string groupName, Nullable<System.DateTime> dateCreated, string createdBy, string comment, string groupType, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var churchGroupsIDParameter = churchGroupsID.HasValue ?
            new ObjectParameter("ChurchGroupsID", churchGroupsID) :
            new ObjectParameter("ChurchGroupsID", typeof(int));

        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));

        var dateCreatedParameter = dateCreated.HasValue ?
            new ObjectParameter("DateCreated", dateCreated) :
            new ObjectParameter("DateCreated", typeof(System.DateTime));

        var createdByParameter = createdBy != null ?
            new ObjectParameter("CreatedBy", createdBy) :
            new ObjectParameter("CreatedBy", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        var groupTypeParameter = groupType != null ?
            new ObjectParameter("GroupType", groupType) :
            new ObjectParameter("GroupType", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ChurchGroups_Result>("Sp_ChurchGroups", flagParameter, churchGroupsIDParameter, groupNameParameter, dateCreatedParameter, createdByParameter, commentParameter, groupTypeParameter, message);
    }

    public virtual ObjectResult<Sp_ExpenditureTransaction_Result> Sp_ExpenditureTransaction(string flag, Nullable<int> branchID, string name, Nullable<System.DateTime> date, string description, string source, Nullable<decimal> amount, string modeOfPayment, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("Flag", flag) :
            new ObjectParameter("Flag", typeof(string));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));

        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));

        var sourceParameter = source != null ?
            new ObjectParameter("Source", source) :
            new ObjectParameter("Source", typeof(string));

        var amountParameter = amount.HasValue ?
            new ObjectParameter("Amount", amount) :
            new ObjectParameter("Amount", typeof(decimal));

        var modeOfPaymentParameter = modeOfPayment != null ?
            new ObjectParameter("ModeOfPayment", modeOfPayment) :
            new ObjectParameter("ModeOfPayment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExpenditureTransaction_Result>("Sp_ExpenditureTransaction", flagParameter, branchIDParameter, nameParameter, dateParameter, descriptionParameter, sourceParameter, amountParameter, modeOfPaymentParameter, message);
    }

    public virtual int Sp_InsertNewChurch(string churchName, string charityNumber, string addressLineOne, string addressLineTwo, string town, string telephone, string webAddress, string postCode, ObjectParameter message)
    {
        var churchNameParameter = churchName != null ?
            new ObjectParameter("ChurchName", churchName) :
            new ObjectParameter("ChurchName", typeof(string));

        var charityNumberParameter = charityNumber != null ?
            new ObjectParameter("CharityNumber", charityNumber) :
            new ObjectParameter("CharityNumber", typeof(string));

        var addressLineOneParameter = addressLineOne != null ?
            new ObjectParameter("AddressLineOne", addressLineOne) :
            new ObjectParameter("AddressLineOne", typeof(string));

        var addressLineTwoParameter = addressLineTwo != null ?
            new ObjectParameter("AddressLineTwo", addressLineTwo) :
            new ObjectParameter("AddressLineTwo", typeof(string));

        var townParameter = town != null ?
            new ObjectParameter("Town", town) :
            new ObjectParameter("Town", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var webAddressParameter = webAddress != null ?
            new ObjectParameter("WebAddress", webAddress) :
            new ObjectParameter("WebAddress", typeof(string));

        var postCodeParameter = postCode != null ?
            new ObjectParameter("PostCode", postCode) :
            new ObjectParameter("PostCode", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertNewChurch", churchNameParameter, charityNumberParameter, addressLineOneParameter, addressLineTwoParameter, townParameter, telephoneParameter, webAddressParameter, postCodeParameter, message);
    }

    public virtual int Sp_InsertReportBugRequest(Nullable<int> bugID, Nullable<int> memberID, string userName, string churchName, string telephone, string emailAddress, string description, ObjectParameter message)
    {
        var bugIDParameter = bugID.HasValue ?
            new ObjectParameter("BugID", bugID) :
            new ObjectParameter("BugID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));

        var churchNameParameter = churchName != null ?
            new ObjectParameter("ChurchName", churchName) :
            new ObjectParameter("ChurchName", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));

        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertReportBugRequest", bugIDParameter, memberIDParameter, userNameParameter, churchNameParameter, telephoneParameter, emailAddressParameter, descriptionParameter, message);
    }

    public virtual int Sp_InsertSupportRequest(Nullable<int> memberID, string userName, string churchName, string telephone, string emailAddress, string subject, string description, ObjectParameter message)
    {
        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));

        var churchNameParameter = churchName != null ?
            new ObjectParameter("ChurchName", churchName) :
            new ObjectParameter("ChurchName", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));

        var subjectParameter = subject != null ?
            new ObjectParameter("Subject", subject) :
            new ObjectParameter("Subject", typeof(string));

        var descriptionParameter = description != null ?
            new ObjectParameter("Description", description) :
            new ObjectParameter("Description", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InsertSupportRequest", memberIDParameter, userNameParameter, churchNameParameter, telephoneParameter, emailAddressParameter, subjectParameter, descriptionParameter, message);
    }

    public virtual int Sp_UpdateChurchDetails(Nullable<int> churchDetailsID, string churchName, string charityNumber, string addressLineOne, string addressLineTwo, string town, string telephone, string webAddress, ObjectParameter message)
    {
        var churchDetailsIDParameter = churchDetailsID.HasValue ?
            new ObjectParameter("ChurchDetailsID", churchDetailsID) :
            new ObjectParameter("ChurchDetailsID", typeof(int));

        var churchNameParameter = churchName != null ?
            new ObjectParameter("ChurchName", churchName) :
            new ObjectParameter("ChurchName", typeof(string));

        var charityNumberParameter = charityNumber != null ?
            new ObjectParameter("CharityNumber", charityNumber) :
            new ObjectParameter("CharityNumber", typeof(string));

        var addressLineOneParameter = addressLineOne != null ?
            new ObjectParameter("AddressLineOne", addressLineOne) :
            new ObjectParameter("AddressLineOne", typeof(string));

        var addressLineTwoParameter = addressLineTwo != null ?
            new ObjectParameter("AddressLineTwo", addressLineTwo) :
            new ObjectParameter("AddressLineTwo", typeof(string));

        var townParameter = town != null ?
            new ObjectParameter("Town", town) :
            new ObjectParameter("Town", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var webAddressParameter = webAddress != null ?
            new ObjectParameter("WebAddress", webAddress) :
            new ObjectParameter("WebAddress", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateChurchDetails", churchDetailsIDParameter, churchNameParameter, charityNumberParameter, addressLineOneParameter, addressLineTwoParameter, townParameter, telephoneParameter, webAddressParameter, message);
    }

    public virtual int AddToken(string token, Nullable<System.DateTime> issuedDate, Nullable<System.DateTime> expiryDate)
    {
        var tokenParameter = token != null ?
            new ObjectParameter("Token", token) :
            new ObjectParameter("Token", typeof(string));

        var issuedDateParameter = issuedDate.HasValue ?
            new ObjectParameter("IssuedDate", issuedDate) :
            new ObjectParameter("IssuedDate", typeof(System.DateTime));

        var expiryDateParameter = expiryDate.HasValue ?
            new ObjectParameter("ExpiryDate", expiryDate) :
            new ObjectParameter("ExpiryDate", typeof(System.DateTime));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToken", tokenParameter, issuedDateParameter, expiryDateParameter);
    }

    public virtual ObjectResult<GetToken_Result> GetToken(string tOKEN)
    {
        var tOKENParameter = tOKEN != null ?
            new ObjectParameter("TOKEN", tOKEN) :
            new ObjectParameter("TOKEN", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetToken_Result>("GetToken", tOKENParameter);
    }

    public virtual int Lock(string seedChar)
    {
        var seedCharParameter = seedChar != null ?
            new ObjectParameter("seedChar", seedChar) :
            new ObjectParameter("seedChar", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Lock", seedCharParameter);
    }

    public virtual int PhonebookList(string sql)
    {
        var sqlParameter = sql != null ?
            new ObjectParameter("sql", sql) :
            new ObjectParameter("sql", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PhonebookList", sqlParameter);
    }

    public virtual ObjectResult<sp_AttendanceHistory_Result> sp_AttendanceHistory(Nullable<int> memberID)
    {
        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("memberID", memberID) :
            new ObjectParameter("memberID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AttendanceHistory_Result>("sp_AttendanceHistory", memberIDParameter);
    }

    public virtual ObjectResult<sp_BranchBirthdays_Result> sp_BranchBirthdays(Nullable<int> branchid)
    {
        var branchidParameter = branchid.HasValue ?
            new ObjectParameter("branchid", branchid) :
            new ObjectParameter("branchid", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BranchBirthdays_Result>("sp_BranchBirthdays", branchidParameter);
    }

    public virtual int sp_DonationOptions_Create(string name, string donationOption)
    {
        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));

        var donationOptionParameter = donationOption != null ?
            new ObjectParameter("donationOption", donationOption) :
            new ObjectParameter("donationOption", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DonationOptions_Create", nameParameter, donationOptionParameter);
    }

    public virtual ObjectResult<sp_GetAppointmentHistory_Result> sp_GetAppointmentHistory(Nullable<int> memberID)
    {
        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("memberID", memberID) :
            new ObjectParameter("memberID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAppointmentHistory_Result>("sp_GetAppointmentHistory", memberIDParameter);
    }

    public virtual ObjectResult<sp_GivingHistory_Result> sp_GivingHistory(Nullable<int> memberID)
    {
        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("memberID", memberID) :
            new ObjectParameter("memberID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GivingHistory_Result>("sp_GivingHistory", memberIDParameter);
    }

    public virtual ObjectResult<sp_WeeklyServiceAggregation_Result> sp_WeeklyServiceAggregation(string branchID, Nullable<int> month, Nullable<int> year)
    {
        var branchIDParameter = branchID != null ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(string));

        var monthParameter = month.HasValue ?
            new ObjectParameter("month", month) :
            new ObjectParameter("month", typeof(int));

        var yearParameter = year.HasValue ?
            new ObjectParameter("year", year) :
            new ObjectParameter("year", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WeeklyServiceAggregation_Result>("sp_WeeklyServiceAggregation", branchIDParameter, monthParameter, yearParameter);
    }

    public virtual ObjectResult<sp_WeeklyServiceStatistics_Result> sp_WeeklyServiceStatistics(string branchID, Nullable<int> month, Nullable<int> year)
    {
        var branchIDParameter = branchID != null ?
            new ObjectParameter("branchID", branchID) :
            new ObjectParameter("branchID", typeof(string));

        var monthParameter = month.HasValue ?
            new ObjectParameter("month", month) :
            new ObjectParameter("month", typeof(int));

        var yearParameter = year.HasValue ?
            new ObjectParameter("year", year) :
            new ObjectParameter("year", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WeeklyServiceStatistics_Result>("sp_WeeklyServiceStatistics", branchIDParameter, monthParameter, yearParameter);
    }

    public virtual int Unlock(Nullable<int> seedLength)
    {
        var seedLengthParameter = seedLength.HasValue ?
            new ObjectParameter("seedLength", seedLength) :
            new ObjectParameter("seedLength", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Unlock", seedLengthParameter);
    }

    public virtual ObjectResult<usp_GetErrorInfo_Result> usp_GetErrorInfo()
    {
        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetErrorInfo_Result>("usp_GetErrorInfo");
    }

    public virtual int SP_BranchDetails(Nullable<int> branchID, Nullable<int> churchID, string name, string addressLineOne, string addressLineTwo, string postZipCode, string town, string country, string telephone, string webAddress, string flagOperation, ObjectParameter message)
    {
        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var churchIDParameter = churchID.HasValue ?
            new ObjectParameter("ChurchID", churchID) :
            new ObjectParameter("ChurchID", typeof(int));

        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));

        var addressLineOneParameter = addressLineOne != null ?
            new ObjectParameter("AddressLineOne", addressLineOne) :
            new ObjectParameter("AddressLineOne", typeof(string));

        var addressLineTwoParameter = addressLineTwo != null ?
            new ObjectParameter("AddressLineTwo", addressLineTwo) :
            new ObjectParameter("AddressLineTwo", typeof(string));

        var postZipCodeParameter = postZipCode != null ?
            new ObjectParameter("PostZipCode", postZipCode) :
            new ObjectParameter("PostZipCode", typeof(string));

        var townParameter = town != null ?
            new ObjectParameter("Town", town) :
            new ObjectParameter("Town", typeof(string));

        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var webAddressParameter = webAddress != null ?
            new ObjectParameter("WebAddress", webAddress) :
            new ObjectParameter("WebAddress", typeof(string));

        var flagOperationParameter = flagOperation != null ?
            new ObjectParameter("flagOperation", flagOperation) :
            new ObjectParameter("flagOperation", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BranchDetails", branchIDParameter, churchIDParameter, nameParameter, addressLineOneParameter, addressLineTwoParameter, postZipCodeParameter, townParameter, countryParameter, telephoneParameter, webAddressParameter, flagOperationParameter, message);
    }

    public virtual int SP_InsertAdminDetails(string firstName, string lastName, Nullable<System.DateTime> dOB, string addressLineOne, string addressLineTwo, string postZipCode, string town, string country, string telephone, string email, string password, string permission, ObjectParameter message)
    {
        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));

        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));

        var dOBParameter = dOB.HasValue ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(System.DateTime));

        var addressLineOneParameter = addressLineOne != null ?
            new ObjectParameter("AddressLineOne", addressLineOne) :
            new ObjectParameter("AddressLineOne", typeof(string));

        var addressLineTwoParameter = addressLineTwo != null ?
            new ObjectParameter("AddressLineTwo", addressLineTwo) :
            new ObjectParameter("AddressLineTwo", typeof(string));

        var postZipCodeParameter = postZipCode != null ?
            new ObjectParameter("PostZipCode", postZipCode) :
            new ObjectParameter("PostZipCode", typeof(string));

        var townParameter = town != null ?
            new ObjectParameter("Town", town) :
            new ObjectParameter("Town", typeof(string));

        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));

        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));

        var permissionParameter = permission != null ?
            new ObjectParameter("Permission", permission) :
            new ObjectParameter("Permission", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertAdminDetails", firstNameParameter, lastNameParameter, dOBParameter, addressLineOneParameter, addressLineTwoParameter, postZipCodeParameter, townParameter, countryParameter, telephoneParameter, emailParameter, passwordParameter, permissionParameter, message);
    }

    public virtual int SP_UpdateAdminDetails(Nullable<int> adminDetailsID, string firstName, string lastName, Nullable<System.DateTime> dOB, string addressLineOne, string addressLineTwo, string postZipCode, string town, string country, string telephone, string email, string password, ObjectParameter message)
    {
        var adminDetailsIDParameter = adminDetailsID.HasValue ?
            new ObjectParameter("AdminDetailsID", adminDetailsID) :
            new ObjectParameter("AdminDetailsID", typeof(int));

        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));

        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));

        var dOBParameter = dOB.HasValue ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(System.DateTime));

        var addressLineOneParameter = addressLineOne != null ?
            new ObjectParameter("AddressLineOne", addressLineOne) :
            new ObjectParameter("AddressLineOne", typeof(string));

        var addressLineTwoParameter = addressLineTwo != null ?
            new ObjectParameter("AddressLineTwo", addressLineTwo) :
            new ObjectParameter("AddressLineTwo", typeof(string));

        var postZipCodeParameter = postZipCode != null ?
            new ObjectParameter("PostZipCode", postZipCode) :
            new ObjectParameter("PostZipCode", typeof(string));

        var townParameter = town != null ?
            new ObjectParameter("Town", town) :
            new ObjectParameter("Town", typeof(string));

        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));

        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateAdminDetails", adminDetailsIDParameter, firstNameParameter, lastNameParameter, dOBParameter, addressLineOneParameter, addressLineTwoParameter, postZipCodeParameter, townParameter, countryParameter, telephoneParameter, emailParameter, passwordParameter, message);
    }

    public virtual int BoilerTemplate(string flag, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BoilerTemplate", flagParameter, message);
    }

    public virtual int ForcePasswordReset(Nullable<int> date)
    {
        var dateParameter = date.HasValue ?
            new ObjectParameter("date", date) :
            new ObjectParameter("date", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ForcePasswordReset", dateParameter);
    }

    public virtual ObjectResult<SP_AddMember_Result> SP_AddMember(Nullable<int> memberId, Nullable<int> branchID, Nullable<int> districtID, Nullable<int> areaID, string title, string firstName, string lastName, string dOB, string addressLineone, string addresslinetwo, string postCode, string town, string country, string telephone, string emailAddress, string comment, string gender, string ageCategory, string membershipType, string maritalStatus, string nationality, string profession, string ethnicity)
    {
        var memberIdParameter = memberId.HasValue ?
            new ObjectParameter("MemberId", memberId) :
            new ObjectParameter("MemberId", typeof(int));

        var branchIDParameter = branchID.HasValue ?
            new ObjectParameter("BranchID", branchID) :
            new ObjectParameter("BranchID", typeof(int));

        var districtIDParameter = districtID.HasValue ?
            new ObjectParameter("DistrictID", districtID) :
            new ObjectParameter("DistrictID", typeof(int));

        var areaIDParameter = areaID.HasValue ?
            new ObjectParameter("AreaID", areaID) :
            new ObjectParameter("AreaID", typeof(int));

        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));

        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));

        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));

        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));

        var addressLineoneParameter = addressLineone != null ?
            new ObjectParameter("AddressLineone", addressLineone) :
            new ObjectParameter("AddressLineone", typeof(string));

        var addresslinetwoParameter = addresslinetwo != null ?
            new ObjectParameter("Addresslinetwo", addresslinetwo) :
            new ObjectParameter("Addresslinetwo", typeof(string));

        var postCodeParameter = postCode != null ?
            new ObjectParameter("PostCode", postCode) :
            new ObjectParameter("PostCode", typeof(string));

        var townParameter = town != null ?
            new ObjectParameter("Town", town) :
            new ObjectParameter("Town", typeof(string));

        var countryParameter = country != null ?
            new ObjectParameter("Country", country) :
            new ObjectParameter("Country", typeof(string));

        var telephoneParameter = telephone != null ?
            new ObjectParameter("Telephone", telephone) :
            new ObjectParameter("Telephone", typeof(string));

        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        var genderParameter = gender != null ?
            new ObjectParameter("Gender", gender) :
            new ObjectParameter("Gender", typeof(string));

        var ageCategoryParameter = ageCategory != null ?
            new ObjectParameter("AgeCategory", ageCategory) :
            new ObjectParameter("AgeCategory", typeof(string));

        var membershipTypeParameter = membershipType != null ?
            new ObjectParameter("MembershipType", membershipType) :
            new ObjectParameter("MembershipType", typeof(string));

        var maritalStatusParameter = maritalStatus != null ?
            new ObjectParameter("MaritalStatus", maritalStatus) :
            new ObjectParameter("MaritalStatus", typeof(string));

        var nationalityParameter = nationality != null ?
            new ObjectParameter("Nationality", nationality) :
            new ObjectParameter("Nationality", typeof(string));

        var professionParameter = profession != null ?
            new ObjectParameter("Profession", profession) :
            new ObjectParameter("Profession", typeof(string));

        var ethnicityParameter = ethnicity != null ?
            new ObjectParameter("Ethnicity", ethnicity) :
            new ObjectParameter("Ethnicity", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AddMember_Result>("SP_AddMember", memberIdParameter, branchIDParameter, districtIDParameter, areaIDParameter, titleParameter, firstNameParameter, lastNameParameter, dOBParameter, addressLineoneParameter, addresslinetwoParameter, postCodeParameter, townParameter, countryParameter, telephoneParameter, emailAddressParameter, commentParameter, genderParameter, ageCategoryParameter, membershipTypeParameter, maritalStatusParameter, nationalityParameter, professionParameter, ethnicityParameter);
    }

    public virtual int Sp_Attendance(string flag, Nullable<int> attendanceID, Nullable<int> memberID, Nullable<int> activityID, Nullable<System.DateTime> attendanceDate, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var attendanceIDParameter = attendanceID.HasValue ?
            new ObjectParameter("AttendanceID", attendanceID) :
            new ObjectParameter("AttendanceID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var activityIDParameter = activityID.HasValue ?
            new ObjectParameter("ActivityID", activityID) :
            new ObjectParameter("ActivityID", typeof(int));

        var attendanceDateParameter = attendanceDate.HasValue ?
            new ObjectParameter("AttendanceDate", attendanceDate) :
            new ObjectParameter("AttendanceDate", typeof(System.DateTime));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Attendance", flagParameter, attendanceIDParameter, memberIDParameter, activityIDParameter, attendanceDateParameter, message);
    }

    public virtual int Sp_Baptism(string flag, Nullable<int> baptismID, Nullable<int> memberID, string officiatingMinister, Nullable<System.DateTime> dateofBaptism, string placeOfBaptism, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var baptismIDParameter = baptismID.HasValue ?
            new ObjectParameter("BaptismID", baptismID) :
            new ObjectParameter("BaptismID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var officiatingMinisterParameter = officiatingMinister != null ?
            new ObjectParameter("OfficiatingMinister", officiatingMinister) :
            new ObjectParameter("OfficiatingMinister", typeof(string));

        var dateofBaptismParameter = dateofBaptism.HasValue ?
            new ObjectParameter("DateofBaptism", dateofBaptism) :
            new ObjectParameter("DateofBaptism", typeof(System.DateTime));

        var placeOfBaptismParameter = placeOfBaptism != null ?
            new ObjectParameter("PlaceOfBaptism", placeOfBaptism) :
            new ObjectParameter("PlaceOfBaptism", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Baptism", flagParameter, baptismIDParameter, memberIDParameter, officiatingMinisterParameter, dateofBaptismParameter, placeOfBaptismParameter, message);
    }

    public virtual ObjectResult<Sp_Communication_Result> Sp_Communication(string flag, Nullable<int> memberID, Nullable<int> communicationID, Nullable<System.DateTime> communicationDate, string communicationType, string communicationPurpose, string communicationOutcome, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var communicationIDParameter = communicationID.HasValue ?
            new ObjectParameter("CommunicationID", communicationID) :
            new ObjectParameter("CommunicationID", typeof(int));

        var communicationDateParameter = communicationDate.HasValue ?
            new ObjectParameter("CommunicationDate", communicationDate) :
            new ObjectParameter("CommunicationDate", typeof(System.DateTime));

        var communicationTypeParameter = communicationType != null ?
            new ObjectParameter("CommunicationType", communicationType) :
            new ObjectParameter("CommunicationType", typeof(string));

        var communicationPurposeParameter = communicationPurpose != null ?
            new ObjectParameter("CommunicationPurpose", communicationPurpose) :
            new ObjectParameter("CommunicationPurpose", typeof(string));

        var communicationOutcomeParameter = communicationOutcome != null ?
            new ObjectParameter("CommunicationOutcome", communicationOutcome) :
            new ObjectParameter("CommunicationOutcome", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Communication_Result>("Sp_Communication", flagParameter, memberIDParameter, communicationIDParameter, communicationDateParameter, communicationTypeParameter, communicationPurposeParameter, communicationOutcomeParameter, message);
    }

    public virtual ObjectResult<SP_Contribution_Result> SP_Contribution(Nullable<int> contributionID, Nullable<int> memberID, string contributionType, Nullable<System.DateTime> contributionDate, Nullable<decimal> amount, string comment)
    {
        var contributionIDParameter = contributionID.HasValue ?
            new ObjectParameter("ContributionID", contributionID) :
            new ObjectParameter("ContributionID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var contributionTypeParameter = contributionType != null ?
            new ObjectParameter("ContributionType", contributionType) :
            new ObjectParameter("ContributionType", typeof(string));

        var contributionDateParameter = contributionDate.HasValue ?
            new ObjectParameter("ContributionDate", contributionDate) :
            new ObjectParameter("ContributionDate", typeof(System.DateTime));

        var amountParameter = amount.HasValue ?
            new ObjectParameter("Amount", amount) :
            new ObjectParameter("Amount", typeof(decimal));

        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Contribution_Result>("SP_Contribution", contributionIDParameter, memberIDParameter, contributionTypeParameter, contributionDateParameter, amountParameter, commentParameter);
    }

    public virtual ObjectResult<SP_COVID_Attendance_Result> SP_COVID_Attendance(string branchName, string activityName, Nullable<System.DateTime> date)
    {
        var branchNameParameter = branchName != null ?
            new ObjectParameter("branchName", branchName) :
            new ObjectParameter("branchName", typeof(string));

        var activityNameParameter = activityName != null ?
            new ObjectParameter("activityName", activityName) :
            new ObjectParameter("activityName", typeof(string));

        var dateParameter = date.HasValue ?
            new ObjectParameter("date", date) :
            new ObjectParameter("date", typeof(System.DateTime));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_COVID_Attendance_Result>("SP_COVID_Attendance", branchNameParameter, activityNameParameter, dateParameter);
    }

    public virtual int Sp_DeleteMember(Nullable<int> iD)
    {
        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeleteMember", iDParameter);
    }

    public virtual ObjectResult<SP_GetContribution_Result> SP_GetContribution(Nullable<int> memberID)
    {
        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetContribution_Result>("SP_GetContribution", memberIDParameter);
    }

    public virtual ObjectResult<Sp_Leadership_Result> Sp_Leadership(string flag, Nullable<int> leadershipID, Nullable<int> memberID, string title, Nullable<System.DateTime> dateOfAppointment, Nullable<System.DateTime> endOfAppointment, string group, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var leadershipIDParameter = leadershipID.HasValue ?
            new ObjectParameter("LeadershipID", leadershipID) :
            new ObjectParameter("LeadershipID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var titleParameter = title != null ?
            new ObjectParameter("Title", title) :
            new ObjectParameter("Title", typeof(string));

        var dateOfAppointmentParameter = dateOfAppointment.HasValue ?
            new ObjectParameter("DateOfAppointment", dateOfAppointment) :
            new ObjectParameter("DateOfAppointment", typeof(System.DateTime));

        var endOfAppointmentParameter = endOfAppointment.HasValue ?
            new ObjectParameter("EndOfAppointment", endOfAppointment) :
            new ObjectParameter("EndOfAppointment", typeof(System.DateTime));

        var groupParameter = group != null ?
            new ObjectParameter("Group", group) :
            new ObjectParameter("Group", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Leadership_Result>("Sp_Leadership", flagParameter, leadershipIDParameter, memberIDParameter, titleParameter, dateOfAppointmentParameter, endOfAppointmentParameter, groupParameter, message);
    }

    public virtual ObjectResult<Sp_MemberGroup_Result> Sp_MemberGroup(string flag, Nullable<int> memberGroupID, Nullable<int> churchGroupID, Nullable<int> memberID, Nullable<System.DateTime> dateJoined, string role, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var memberGroupIDParameter = memberGroupID.HasValue ?
            new ObjectParameter("MemberGroupID", memberGroupID) :
            new ObjectParameter("MemberGroupID", typeof(int));

        var churchGroupIDParameter = churchGroupID.HasValue ?
            new ObjectParameter("ChurchGroupID", churchGroupID) :
            new ObjectParameter("ChurchGroupID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var dateJoinedParameter = dateJoined.HasValue ?
            new ObjectParameter("DateJoined", dateJoined) :
            new ObjectParameter("DateJoined", typeof(System.DateTime));

        var roleParameter = role != null ?
            new ObjectParameter("Role", role) :
            new ObjectParameter("Role", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MemberGroup_Result>("Sp_MemberGroup", flagParameter, memberGroupIDParameter, churchGroupIDParameter, memberIDParameter, dateJoinedParameter, roleParameter, message);
    }

    public virtual ObjectResult<SP_MemberImage_Result> SP_MemberImage(string action, Nullable<int> memberID, byte[] picture)
    {
        var actionParameter = action != null ?
            new ObjectParameter("action", action) :
            new ObjectParameter("action", typeof(string));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("memberID", memberID) :
            new ObjectParameter("memberID", typeof(int));

        var pictureParameter = picture != null ?
            new ObjectParameter("picture", picture) :
            new ObjectParameter("picture", typeof(byte[]));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MemberImage_Result>("SP_MemberImage", actionParameter, memberIDParameter, pictureParameter);
    }

    public virtual ObjectResult<Sp_MemberRelatives_Result> Sp_MemberRelatives(string flag, Nullable<int> relationID, Nullable<int> memberID, Nullable<int> memberRelativeID, string relationType, ObjectParameter message, string memberName)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var relationIDParameter = relationID.HasValue ?
            new ObjectParameter("RelationID", relationID) :
            new ObjectParameter("RelationID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var memberRelativeIDParameter = memberRelativeID.HasValue ?
            new ObjectParameter("MemberRelativeID", memberRelativeID) :
            new ObjectParameter("MemberRelativeID", typeof(int));

        var relationTypeParameter = relationType != null ?
            new ObjectParameter("RelationType", relationType) :
            new ObjectParameter("RelationType", typeof(string));

        var memberNameParameter = memberName != null ?
            new ObjectParameter("MemberName", memberName) :
            new ObjectParameter("MemberName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MemberRelatives_Result>("Sp_MemberRelatives", flagParameter, relationIDParameter, memberIDParameter, memberRelativeIDParameter, relationTypeParameter, message, memberNameParameter);
    }

    public virtual ObjectResult<SP_Members_Result> SP_Members(Nullable<int> branchId, string action)
    {
        var branchIdParameter = branchId.HasValue ?
            new ObjectParameter("branchId", branchId) :
            new ObjectParameter("branchId", typeof(int));

        var actionParameter = action != null ?
            new ObjectParameter("action", action) :
            new ObjectParameter("action", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Members_Result>("SP_Members", branchIdParameter, actionParameter);
    }

    public virtual ObjectResult<Sp_Profession_Result> Sp_Profession(string flag, Nullable<int> professionID, Nullable<int> memberID, string professionName, string companyName, string isCurrentRole, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var professionIDParameter = professionID.HasValue ?
            new ObjectParameter("ProfessionID", professionID) :
            new ObjectParameter("ProfessionID", typeof(int));

        var memberIDParameter = memberID.HasValue ?
            new ObjectParameter("MemberID", memberID) :
            new ObjectParameter("MemberID", typeof(int));

        var professionNameParameter = professionName != null ?
            new ObjectParameter("ProfessionName", professionName) :
            new ObjectParameter("ProfessionName", typeof(string));

        var companyNameParameter = companyName != null ?
            new ObjectParameter("CompanyName", companyName) :
            new ObjectParameter("CompanyName", typeof(string));

        var isCurrentRoleParameter = isCurrentRole != null ?
            new ObjectParameter("IsCurrentRole", isCurrentRole) :
            new ObjectParameter("IsCurrentRole", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Profession_Result>("Sp_Profession", flagParameter, professionIDParameter, memberIDParameter, professionNameParameter, companyNameParameter, isCurrentRoleParameter, message);
    }

    public virtual ObjectResult<Sp_ValidateUserCredentials_Result> Sp_ValidateUserCredentials(string emailAddress, string password, string churchName, ObjectParameter message)
    {
        var emailAddressParameter = emailAddress != null ?
            new ObjectParameter("EmailAddress", emailAddress) :
            new ObjectParameter("EmailAddress", typeof(string));

        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));

        var churchNameParameter = churchName != null ?
            new ObjectParameter("ChurchName", churchName) :
            new ObjectParameter("ChurchName", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ValidateUserCredentials_Result>("Sp_ValidateUserCredentials", emailAddressParameter, passwordParameter, churchNameParameter, message);
    }

    public virtual int Sp_ReportDefinitions(string flag, string reportName, string queryString, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var reportNameParameter = reportName != null ?
            new ObjectParameter("ReportName", reportName) :
            new ObjectParameter("ReportName", typeof(string));

        var queryStringParameter = queryString != null ?
            new ObjectParameter("QueryString", queryString) :
            new ObjectParameter("QueryString", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ReportDefinitions", flagParameter, reportNameParameter, queryStringParameter, message);
    }

    public virtual ObjectResult<Sp_SavedReportQueries_Result> Sp_SavedReportQueries(string flag, string reportName, string queryString, string reportOwner, string reportCategory, ObjectParameter message)
    {
        var flagParameter = flag != null ?
            new ObjectParameter("flag", flag) :
            new ObjectParameter("flag", typeof(string));

        var reportNameParameter = reportName != null ?
            new ObjectParameter("ReportName", reportName) :
            new ObjectParameter("ReportName", typeof(string));

        var queryStringParameter = queryString != null ?
            new ObjectParameter("QueryString", queryString) :
            new ObjectParameter("QueryString", typeof(string));

        var reportOwnerParameter = reportOwner != null ?
            new ObjectParameter("ReportOwner", reportOwner) :
            new ObjectParameter("ReportOwner", typeof(string));

        var reportCategoryParameter = reportCategory != null ?
            new ObjectParameter("ReportCategory", reportCategory) :
            new ObjectParameter("ReportCategory", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SavedReportQueries_Result>("Sp_SavedReportQueries", flagParameter, reportNameParameter, queryStringParameter, reportOwnerParameter, reportCategoryParameter, message);
    }

    public virtual int Sp_RegisterChurchManagerLicense(string cDKey, ObjectParameter message)
    {
        var cDKeyParameter = cDKey != null ?
            new ObjectParameter("CDKey", cDKey) :
            new ObjectParameter("CDKey", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_RegisterChurchManagerLicense", cDKeyParameter, message);
    }

    public virtual int Sp_RegisterShippingManagerLicense(string cDKey, ObjectParameter message)
    {
        var cDKeyParameter = cDKey != null ?
            new ObjectParameter("CDKey", cDKey) :
            new ObjectParameter("CDKey", typeof(string));

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_RegisterShippingManagerLicense", cDKeyParameter, message);
    }
}
